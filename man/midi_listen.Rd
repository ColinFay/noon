% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run.R
\name{midi_all}
\alias{midi_all}
\alias{midi_one_event}
\alias{midi_one_interface}
\alias{midi_one_event_one_interface}
\title{Listen to midi events}
\usage{
midi_all(callback = ~cat(.x, "\\n"), n = 0.5, with_clock = FALSE)

midi_one_event(
  event = c("noteoff", "noteon", "poly aftertouch", "cc", "program",
    "channel aftertouch", "pitch", "position", "select", "start", "continue", "stop",
    "reset"),
  callback = ~cat(.x, "\\n"),
  n = 0.5
)

midi_one_interface(
  interface,
  callback = ~cat(.x, "\\n"),
  n = 0,
  with_clock = FALSE
)

midi_one_event_one_interface(
  event = c("noteoff", "noteon", "poly aftertouch", "cc", "program",
    "channel aftertouch", "pitch", "position", "select", "start", "continue", "stop",
    "reset"),
  interface,
  callback = ~cat(.x, "\\n"),
  n = 0.5
)
}
\arguments{
\item{callback}{The callback function to execute when R receives a MIDI message.
This function takes one argument, which is the JSON MIDI message.}

\item{n}{Time in second between each check for a new MIDI message.}

\item{with_clock}{Whether or not to listen to the clock event.}

\item{event}{the event to listen to. Available event are "noteoff", "noteon",
"poly aftertouch", "cc", "program", "channel aftertouch", "pitch", "position", "select", "start", "continue", "stop", and "reset"}

\item{interface}{name of the interface to listen to. Must be one of \code{midi_list()}.}
}
\value{
A background process listen to MIDI events
}
\description{
These functinos will launch a process
that checks every \code{n} seconds (default 0.5)
if any/a given midi event has been received on any/a given
midi interface.
}
\details{
\code{midi_all()}, listens for all interfaces and all events (except the clock,
which can be listen with \code{with_clock = FALSE}), \code{midi_one_event()} listens to
one specific event on all interfaces, \code{midi_one_interface()} listens to any
event from one interface, and \code{midi_one_event_one_interface()} listens to one
event on one interface.
}
\examples{
if (interactive()){
  # Launch
  midi_all()
  # Kill the process
  midi_close_all()
}
}
